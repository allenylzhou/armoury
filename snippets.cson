# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson
'.source.js':
  'React Component':
    'prefix': 'react'
    'body': """
      // @flow
      import classNames from 'classnames';
      import _ from 'lodash';
      import { withStyles, createStyleSheet } from 'material-ui/styles';
      import React, { Component } from 'react';

      const styleSheet = createStyleSheet('${1:ComponentName}', (theme) => ({
        [theme.breakpoints.up('sm')]: {

        },
        [theme.breakpoints.up('md')]: {

        },
        [theme.breakpoints.up('lg')]: {

        },
        [theme.breakpoints.up('xl')]: {

        }
      }));

      type Props = {
        classes: {[string]: string}
      };
      type State = {};

      class ${1:ComponentName} extends Component<void, Props, State> {
        //https://github.com/facebook/flow/issues/1594
        state: State;

        static defaultProps = {

        };

        constructor(props: Props) {
          super(props);
          this.state = {};
        }

        render() {
          const {
            classes
          } = this.props;
          return <div>

          </div>;
        }
      }

      export default withStyles(styleSheet)(${1:ComponentName});
    """
  'Redux Container':
    'prefix': 'redux'
    'body': """
      // @flow
      import classNames from 'classnames';
      import _ from 'lodash';
      import { withStyles, createStyleSheet } from 'material-ui/styles';
      import React, { Component } from 'react';
      import { connect, bindActionCreators } from 'react-redux';
      import type { Connector } from 'react-redux';

      const styleSheet = createStyleSheet('${1:ComponentName}', (theme) => ({
        [theme.breakpoints.up('sm')]: {

        },
        [theme.breakpoints.up('md')]: {

        },
        [theme.breakpoints.up('lg')]: {

        },
        [theme.breakpoints.up('xl')]: {

        }
      }));

      type Props = {
        classes: {[string]: string}
      };
      type State = {};

      class ${1:ComponentName} extends Component<void, Props, State> {
        //https://github.com/facebook/flow/issues/1594
        state: State;

        static defaultProps = {

        };

        constructor(props: Props) {
          super(props);
          this.state = {};
        }

        render() {
          const classes = this.context.styleManager.render(styleSheet);
          return <div>

          </div>;
        }
      }

      type OwnProps = {};

      const mapStateToProps = (state, ownProps: OwnProps) => {
        return {};
      };

      const mapDispatchToActions = (dispatch, ownProps: OwnProps) => {
        return bindActionCreators({

        }, dispatch);
      };

      const connector: Connector<OwnProps, Props> = connect(mapStateToProps, mapDispatchToActions);

      export default withStyles(styleSheet)(connector(${1:ComponentName}));
    """
